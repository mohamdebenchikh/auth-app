<?php

namespace App\Core;

class Route
{
    protected string $path;            // The URL path pattern to match against
    protected $callback;               // The callback to execute when the route matches
    protected array $params = [];      // The extracted parameters from the URL
    protected array $middleware = [];  // The middleware stack for the route

    public function __construct(string $path, $callback)
    {
        $this->path = $path;
        $this->callback = $callback;
    }

    public function middleware($middleware)
    {
        if(is_array($middleware)){
            $this->middleware = array_merge($this->middleware, $middleware);
        }else{
            $this->middleware[] = $middleware;
        }

        return $this;
    }

    public function match(string $path): bool
    {
        // Create a regular expression pattern for the URL path
        $pattern = preg_replace('/{([a-zA-Z0-9_]+)}/', '([^/]+)', $this->path);
        $pattern = str_replace('/', '\/', $pattern);
        $pattern = '/^' . $pattern . '$/';

        // Check if the provided path matches the pattern
        if (preg_match($pattern, $path, $matches)) {
            // Remove the full match from the matches array
            array_shift($matches);

            // Extract and store the parameter values
            $this->params = $this->extractParams($matches);

            return true;  // The path matches the route
        }

        return false;  // The path does not match the route
    }

    protected function extractParams(array $matches): array
    {
        $params = [];

        // Extract parameter names from the route path
        preg_match_all('/{([a-zA-Z0-9_]+)}/', $this->path, $paramNames);

        foreach ($paramNames[1] as $index => $paramName) {
            // Associate parameter names with their values
            $params[$paramName] = $matches[$index];
        }

        return $params;
    }

    public function execute($request)
    {
        if (!empty($this->middleware)) {
            $middleware = array_reverse($this->middleware);
            $response = null;

            foreach ($middleware as $class) {
                $instance = new $class();
                $response = $instance->handle($request, function ($request) use (&$response) {
                    return $this->executeCallback($response);
                });
            }

            return $response;  // Return the response generated by the route callback
        }

        return $this->executeCallback();
    }

    protected function executeCallback($previousResponse = null)
    {
        $callback = $this->callback;
        $params = array_values($this->params);

        if (is_array($callback) && count($callback) === 2) {
            [$controller, $method] = $callback;

            if (is_string($controller) && class_exists($controller)) {
                $controllerInstance = new $controller();

                if (is_callable([$controllerInstance, $method])) {
                    return call_user_func_array([$controllerInstance, $method], $params);
                }
            }
        }

        if (is_callable($callback)) {
            return call_user_func_array($callback, $params);
        }

        // Invalid callback, return null or handle the error accordingly
        return $previousResponse;
    }
}
